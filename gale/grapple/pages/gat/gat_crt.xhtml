<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:gale="http://gale.tue.nl/adaptation">
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
  <link rel="stylesheet" href="../../tutorial.css" type="text/css" />
  <title></title>
</head>

<body>
<h1>Pedagogical Relationship Types</h1>

<p>
By using <em>Pedagogical Relationship Types</em> (PRTs) a teaching strategy can be created.
With PRTs concepts from the  <gale:object name="glossary_dm" /> can be connected to form a pedagogically meaningful
strategy which is defined through the <gale:object name="glossary_cam" />. This model determines how and when
learning resources related to these concepts should be presented to the learner.
</p>
<p>
In a number of places in this tutorial you will see references to the term <em>Concept Relationship Type</em>
(CRT) instead of PRT. This is because the PRTs can be used to contact concepts to some adaptation or
presentation rules that may or may not actually have <em>pedagogical</em> meaning.
</p>
<p>
In order to empower the content author to define PRTs the <gale:a href="gat_crttool">PRT Tool</gale:a>
(or editor) has been implemented. Most authors will not need this tool and can create their courses
based on the "standard" PRTs we describe here.
</p>
<h2>Predefined PRTs</h2>
<p>
The description of the <gale:a href="gat_crttool">PRT Tool</gale:a> contains all the details of a PRT.
Here we concentrate on the main structure and the adaptation associated with a PRT.
Adaptation is described in terms of events and operations on <em><gale:object name="glossary_um" /> attributes</em>.
With each concept we associate a number of attributes, some of which are local to
<gale:a href="GALE"><gale:object name="glossary_gale" /></gale:a> and some of which are also
communicated to (or received from) <gale:a href="GUMF"><gale:object name="glossary_gumf" /></gale:a>.
</p>
<p>
All standard PRTs are either <em>unary</em> or <em>binary</em>, meaning they have either one or two
<em>sockets</em> to hold one or more concepts. For simplicity the socket of a unary PRT is simply called "self"
and the sockets of a binary PRT are called "source" and "target". The adaptation to each of the concepts
in the "target" socket (of a binary PRT) depends on <gale:object name="glossary_um" /> values of all concepts in the "source" socket
combined. Unary PRTs typically define some adaptation or <gale:object name="glossary_um" /> update for each concept of the "self"
socket individually.
</p>
<h3>G-Prerequisite</h3>
<p>
This PRT expresses the <em>suitability</em> of concepts in the <gale:object name="glossary_um" /> in terms of the required knowledge
of some other "prerequisite" concepts. The "prerequisite" concepts are in the "source" socket and determine
the suitability of the "target" sockets. This PRT is typically used to express that a concept is only suitable
for a student if the student first studied some other concepts. It thus leads to partial sequencing of
the learning process.
</p>
<p>
By default the "target" concepts are considered "suitable" (the <em>suitability</em> <gale:object name="glossary_um" /> variable
becomes "true") if the knowledge of <em>all</em> prerequisite ("source") concepts exceeds the value 80.
This value is called "level" and is a parameter of the PRT. You can thus change that value in the
<gale:a href="gat_cam">Course Editor</gale:a> if you deem that the required minimum knowledge level
should be different from 80.
</p>
<p>
As an example in a course on the Solar System, we can express that a student should only study "Io"
if the user has enough knowledge about "Moon" and "Jupiter" by creating an instance of the G-Prerequisite
PRT with both "Moon" and "Jupiter" in the "source" socket and "Io" in the "target" socket (probably along
with the other moons of Jupiter).
</p>
<p>
You should be careful never to create a cycle of prerequisites. If A is a prerequisite for B, B for C and
C for A then none of the concepts can ever become "suitable".
</p>
<h3>G-Visit</h3>
<p>
This is a very simple unary PRT. It counts the number of visits of a concept (in the "self" socket)
by a user.
Each time a user accesses the concept, the number of visits for that concept
for that user is increased by one. This number is stored in a <gale:object name="glossary_um" /> variable called "visited".
</p>
<h3>G-Knowledge-Update</h3>
<p>
This is a fairly complex unary PRT. It is used to take action when the learner accesses a concept.
Looking at the menu (to the left of this page in the browser window) you see a part of the concept
hierarchy. When you access a concept the G-Knowledge-Update takes three actions:
<ul>
<li>
If the concept is "suitable" (according to the prerequisites) its "own knowledge" becomes 100,
otherwise it becomes 35 (unless it was already higher). The "own knowledge" is knowledge that represents
the knowledge gained from studying only the concept itself. The number "35" is a parameter of the PRT
so in the CAM you can replace it by another number if desired.
</li>
<li>
If the concept is "suitable" the "visited" counter is incremented. Although this is strictly speaking not
something a "knowledge update" should do it means you no longer need to also use the G-Visit PRT for
most concepts.
</li>
<li>
The "knowledge" of a concept is not only gained by studying the concept itself but also by studying
its children in the concept hierarchy. The current concept you are studying for instance has two children:
one about the <gale:a href="gat_crttool">PRT Tool</gale:a> and one about the
<gale:a href="gat_crt_data">PRT data structures</gale:a>. The knowledge thus comes from three concepts.
The "own knowledge" contributes 1/3 of the "knowledge" value and the children each contribute 1/3 as well.
(In general this is 1 divided by the number of children + 1.)
</li>
</ul>
</p>
<h3>G-Knowledge-Propagation-Parent</h3>
<p>
When a concept is visited a fourth action needs to be taken in addition to what G-Knowledge-Update
already does: when a concept is a child of another concept (according to the "parent" DM relations
that define a concept hierarchy). In order to contribute to the knowledge of the parent
any change to the knowledge needs to be <em>propagated</em> to the parent. This could be done
as part of G-Knowledge-Update, but the knowledge also needs to be propagated further to the
ancestors of the accessed concept. The current concept has 3 siblings, so each will contribute
1/5 of its knowledge to the parent (so the parent gets 1/5 of its knowledge from
itself and 1/5 from each of its 4 children).
(In general a concept contributes 1 divided by the number of siblings + 2 to the parent.)
To make knowledge propagation through the concept hierarchy work you need to create one instance
of G-Knowledge-Propagation in the CAM and insert all concepts of the hierarchy into its single socket.
</p>
<h3>G-Knowledge-Propagation</h3>
<p>
The G-Knowledge-Update PRT propagates knowledge changes from children to parents in the concept hierarchy.
If you want knowledge changes (in "source" concepts) to propagate to arbitrary "target" concepts you should
use G-Knowledge-Propagation. This PRT has a parameter "level" that can be specified in the CAM and indicates
which percentage of the knowledge change is propagated. (The default is 100%).
</p>
<p>
You should be careful never to create a cycle of knowledge propagation relationships, as this would
define an infinite loop. (The GALE engine will detect and abort such a loop.)
</p>
<h3>G-Prerequisite-Parent</h3>
<p>
This PRT is used exclusively used to express that a parent concept should be studied before its children.
(Note that these children can be reachable through links from other concepts, without first visiting the parent.)
A regular G-Prerequisite cannot be used for this, because the required knowledge level will not be reached
before studying the children.
The G-Prerequisite therefore does not look at the "knowledge" of the concept but only at the "own knowledge",
the knowledge obtained from studying just this concept.
</p>
<h3>G-Start</h3>
<p>
The conceptual structure of the course domain (the <gale:object name="glossary_dm" />) does not indicate
where to begin studying the course. The unary G-Start PRT is used for this purpose. Although it is possible
to indicate more than one starting point (concept) for a course, there will typically be only one.
</p>
<p>
When an <gale:a href="LMS"><gale:object name="glossary_lms" /></gale:a> performs a "getCourses" request
(sent to GALE through <gale:a href="GEB"><gale:object name="glossary_geb" /></gale:a>)
the answer contains concepts that appear in the socket of a G-Start PRT.
</p>
<h3>G-Layout</h3>
<p>
The presentation of this tutorial divides the browser window (or the part of the window not occupied by
information from an LMS) into four parts: on the left is an accordion menu showing part of the concept
hierarchy, at the top is a header showing your progress through the tutorial, at the bottom is a suggestion
as to which concept you might wish to study next, and the main area shows the page (resource) associated
with the current concept.
</p>
<p>
The layout generated by GALE is defined by the "layout" <gale:object name="glossary_um" /> variable. This may seem like a strange
way of defining layout but it actually has great advantages over statically defined layout (done when
configuring the server for instance):
<ul>
<li>
To present concepts using a specific layout these concepts are added to the (self) socket of the layout PRT.
The G-Layout PRT defines a single layout, but you could easily create many similar PRTs each defining a different
layout. You can thus have different presentations for different concepts.
</li>
<li>
The presentation of concepts can be made adaptive, so the same concept can be presented in different ways
depending for instance on the learner's knowledge about some concept(s).
In the <a href="http://wwwis.win.tue.nl/2ID65/">course on hypermedia</a> served by GALE at the
<a href="http://www.tue.nl/">Eindhoven University of Technology</a>.
The layout may also be chosen from some alternatives depending on (browser) device characteristics.
</li>
</ul>
</p>
<h3>G-Hide</h3>
<p>
This PRS states that when accessing a concept in the "source" the
concepts in the "target" become "hidden", meaning that they will be hidden or not in the navigation menu you see on
the left in this tutorial. The concepts have a UM attribute "hierarchy" that is set to false or true.
In this tutorial we use G-Hide to hide the Pre-Test after the start
of the studying process.
</p>
<h3>G-Unhide</h3>
<p>
This PRT states that when accessing a concept in the "source" the concepts in the "target" become
"hidden" or "unhidden" depending on their "suitability".
Suitable concepts become unhidden (hence the name) but unsuitable
concepts become hidden.
In this tutorial we use G-Hide and G-Unhide to make multiple-choice tests available or hidden.
</p>
<h3>G-Quiz</h3>
<p>
This unary PRT has no adaptation code associated with it but it defines the UM attributes "visited",
"knowledge" and "done", which can be used in the code associated with a
<gale:a href="gale_mcmodule">multiple-choice test</gale:a>.
</p>
<h3>G-Public-Knowledge</h3>
<p>
This unary PRT is used to propagate UM knowledge updates (for the concepts in the PRT's only socket) to GUMF.
For instance, if a user "johndoe@gale.tue.nl" learns something about a concept in this tutorial the knowledge
value of the main GRAPPLE concept will be updated. The value is stored in GUMF as the value for
"gale://johndoe@gale.tue.nl/cam/GRAPPLE/GRAPPLE#knowledge".
</p>
<h3>G-Public-Visited</h3>
<p>
This unary PRT is used to propagate UM visited updates (for the concepts in the PRT's only socket) to GUMF.
For instance, if a user "johndoe@gale.tue.nl" visits the concept GRAPPLE in this tutorial for
the 25th time the visited value 25
of the main GRAPPLE concept will be updated. The value is stored in GUMF as the value for
"gale://johndoe@gale.tue.nl/cam/GRAPPLE/GRAPPLE#visited".
</p>
</body>
</html>
