<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:gale="http://gale.tue.nl/adaptation">
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
  <link rel="stylesheet" href="../../tutorial.css" type="text/css" />
  <title></title>
</head>

<body>
<h1>Adapting the Presentation in <gale:object name="glossary_gale" /></h1>

<p>
The <em>presentation</em> of a course consists of two main aspects: the presentation of links,
using link annotation with colors and icons (which is mostly described in the section on the
<gale:a href="gale_adaptlinkmodule">adapting links</gale:a>) and the overall presentation or layout of
the course (described here). The layout typically defines where the “main” content (of the XML file resources) goes and
where additional material generated by <gale:a href="gale_viewmodule">View processors</gale:a> goes.
Different parts of an application may require a different layout, and the layout may also depend on the
<gale:object name="glossary_um" />. (Some users may for instance require a different fish-eye view of the link
structure than others.) For each concept GALE uses a UM attribute "layout" to determine the layout to be used
for that concept (for the current user).
</p>
<p>GALE uses an extendable configuration mechanism. Configuration information can determine the (default) layout,
the way in which UM variables should determine link presentation, the processors to use, the stylesheet
to use and much more. The "current configuration state" in GALE may depend on the UM, the concept requested,
the actual HTTP request, elements in the Spring configuration file galeconfig.xml, and anything else available to GALE.
</p>
<p>The file galeconfig.xml sets up a <em>config manager</em> and a set of <em>config resolvers</em>.
Requests for configuration information are directed to the config manager, and are identified by a URI.
The fragment part of the URI is used to encapsulate the name of a specific attribute requested,
the remainder of the URI is used to identify a specific config resolver.
For instance, the PresentationConfig class is a config resolver identified by the URI
<code>gale://gale.tue.nl/config/presentation</code>. It defines several attributes and one of them is called ‘css’.
This would allow a request to the config manager with URI <code>gale://gale.tue.nl/config/presentation#css</code>.
The actual value returned depends on the implementation of PresentationConfig,
which in turn may use anything available to GALE to produce a result
(like the current UM, the current concept, the HTTP request, etc.).Below is a list of the configuration URIs available (and used) by default.
The URIs use a <code>gale:</code> protocol part in the URI which indicates to gale that this is a special gale URI.
No request using <code>gale:</code> is ever sent over the network, as it is not a "real" protocol.
<ul><li>
<code>gale://gale.tue.nl/config/presentation#css</code><ul>
<li>
returns: java.lang.String</li>
<li>
This relates mostly to link adaptation and is described in the section on
<gale:a href="gale_adaptlinkmodule">adapting links</gale:a>.
Of course the css fie can include presentation style attributes for many other tags besides links.
</li>
</ul>
</li>
<li><code>gale://gale.tue.nl/config/presentation#layout</code>
<ul>
<li>returns: org.dom4j.Element
</li>
<li>Might return null to indicate no layout should be used (the default).
This is overwritten by a "#layout" attribute in the current concept.
This attribute should contain serialized XML that makes up the layout to use.
We give several examples further below.
</li>
</ul>
</li>
<li><code>gale://gale.tue.nl/config/processor#list</code>
<ul>
<li>returns: java.util.List&lt;nl.tue.gale.ae.ResourceProcessor&gt;
</li>
<li>Relies on galeconfig.xml to supply a list of processors.
It expects the named bean "processorList" to contain such a list.<br />
You can change or add elements to the processor list to define completely new adaptive behavior if desired.
</li>
</ul>
</li>
<li><code>gale://gale.tue.nl/config/link#classexpr</code>
<ul>
<li>returns: java.lang.String
</li>
<li>Returns the expression that should be evaluated to determine the css class of links to a particular concept,
based on UM variables about that concept.
This relates mostly to link adaptation and is described in the section on
<gale:a href="gale_adaptlinkmodule">adapting links</gale:a>.
</li>
</ul>
</li>
</ul>
The default config resolvers can be extended (sub classed),
to allow more complex means of storing and distributing configuration information.
</p>
<p>GALE offers three different Processors for creating a presentation layout.
One uses HTML tables, devoting a table cell to each view, one uses iframes and one uses CSS to define positions
and dimensions of div elements in an HTML page. The choice which layout processor to use is made in galeconfig.xml.
</p><h2>The LayoutProcessor</h2>
<p>The LayoutProcessor allows the use of separate views with a presentation structure, implemented using HTML tables.
The LayoutProcessor does its work without other processors knowing of its existence.
The standard levels for this processor are 10-50 which causes it to run after the XMLProcessor.
The document is thus already adapted when layout is added, meaning that the views see the
<gale:object name="glossary_um" /> after any updates that might have occurred through the adaptation process
(like updates caused by conditional object inclusion).
The LayoutProcessor creates a new (in-memory) XML document that contains the views embedded in a table
that defines the layout. This document has a <code>&lt;content /&gt;</code> placeholder element where the actual
content of the page should be.
After the main content the views are processed and their output is added to the table structure.<br />To determine the exact layout, the processor uses either the value of the configuration key
<code>gale://gale.tue.nl/config/presentation#layout</code> or the "layout" attribute of the current concept.
In this tutorial we have modified the default "G-Layout" <gale:object name="glossary_prt" /> to give all page
concepts this layout attribute through the <gale:object name="glossary_cam" /> editor.
The layout of this tutorial is defined through the following <gale:a href="gale_code">GALE code</gale:a>:
<pre>
  #layout:String `  &lt;struct cols="250px;*"&gt;    &lt;view name="static-tree-view" /&gt;    &lt;struct rows="60px;*;40px"&gt;      &lt;view name="file-view" file="gale:/grapple/header.xhtml" /&gt;      &lt;content /&gt;      &lt;p&gt;&lt;hr /&gt;Next suggested concept to study: &lt;view name="next-view" /&gt;&lt;/p&gt;    &lt;/struct&gt;  &lt;/struct&gt;  `
</pre>
The view elements are explained in the <gale:a href="gale_viewmodule">section on the <code>&lt;view&gt;</code> tag</gale:a>.
The <code>&lt;content /&gt;</code> element is a placeholder for the actual document content.
The struct elements can be nested using cols or rows attributes, like regular HTML frameset structures.
They are translated by the LayoutProcessor to HTML tables.
</p>
<h2>The FrameLayoutProcessor</h2>
<p>The FrameLayoutProcessor can be used instead of the default LayoutProcessor.
It uses the same layout configuration. But instead of producing the table inside the concept's content,
it generates a special layout XHTML file that contains the table and view code upon the first request.
This document contains an iframe where the actual content should be.
This iframe requests the exact same concept with an added http parameter "view=frame".
This will make the FrameLayoutProcessor do (almost) nothing,
hence allowing normal adaptation on the content without layout.
The levels associated with the FrameLayoutProcessor are 0-1, meaning it will run before the XMLProcessor.
Any UM updates caused by for instance conditionally included objects will not affect the adaptation of generated
views in the layout. (So this is different from the behavior with the LayoutProcessor.)
</p>
<h2>The CSSLayoutProcessor</h2>
<p>The CSSLayoutProcessor mimics the behavior of the standard LayoutProcessor,
but does so through <code>&lt;div&gt;</code> sections and CSS layout; no tables are used.
The levels 10-20 for this processor mean it runs before the XMLProcessor (like the FrameLayoutProcessor and
unlike LayoutProcessor). All information required for layout is added and the XML processing happens only once.
</p>
<p>The "information required for layout" is in the form of XHTML (extended with some GALE elements).
This piece of XHTML is obtained by retrieving the value of the configuration key
<code>gale://gale.tue.nl/config/presentation#cssLayout</code>.
The default behavior for the config resolver is to retrieve the information from the UM attribute "#layout.content".
In most cases the layout XHTML will contain some gale view definitions.
These are then added to the beginning of the document that is being processed by the CSSLayoutProcessor.Here is a snippet of the definition of a layout concept in <gale:a href="gale_code">GALE code</gale:a>:
<pre>	#layout.content `	(${?type}.equals("page")?		"&lt;view xmlns='http://gale.tue.nl/adaptation' css='true' 			name='static-tree-view'/&gt;":		"")`</pre>The code inside the #layout.content attribute checks whether the current concept has a property called "type"
whose value is "page". If so, it returns a piece of XHTML code that contains the specified gale view element.
The XML processor will add the code for this view to the document.
Setting css to true on the view tells it to generate its code inside a div section whose css class is the name of
the view. The content of the document will be placed inside a div section with css class "content". The following CSS
example demonstrates the layout of these elements (the static-tree-view gives the ul element the css class "nave"):
<pre>div#static-tree-view {	position: fixed;	top: 0px;	left: 0px;	width: 250px;	height: 100%;	margin: 5px;	padding: 5px;}div#content {	left: 250px;	position: absolute;}#nav li {    list-style: none;}ul#nav {	padding: 0px;	margin: 0px;}#nav ul {	padding: 0px 0px 0px 15px;	margin: 2px;}
</pre>The CSS file can be chosen based on the UM, using the attribute "#layout.css".
</p>
</body>
</html>
