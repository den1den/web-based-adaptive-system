<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">enabling easy access to common object in
the {{{Resource}}} that is passed from one [[processors|processor]] to another</gale:text>

<gale:text tag="long" type="creole">After an initial setup by the \AE, the {{{Resource}}}
contains some objects that define the user request. [[processors|Processors]] use and
update the information in the {{{Resource}}} to create a suitable response to the user.
The {{{GaleContext}}} enables easy access to most of the objects stored in and/or
accessible through the {{{Resource}}}. The {{{GaleContext}}} can be accessed from within
[[../gale-code|GALE code]] by means of the 'gale' variable. Some methods are:
* 'eval', evaluate some GALE code in the current context
* 'exec', execute some GALE code in the current context
* 'um', transparent access to the \UM
* 'dm', transparent access to the \DM
* 'concept', the requested concept
* 'userId', the user's identifier
* 'ebc', access to the {{{EventBusClient}}} that allows sending [[events]]
* 'stream', optional {{{InputStream}}} that represents the state of the {{{Resource}}}
* 'xml', optional XML DOM tree representing the state of the {{{Resource}}}
* etc.</gale:text>

<gale:text tag="default" type="creole">The {{{GaleContext}}} provides easy access to many
objects accessible through the {{{Resource}}}. The [[adaptation-engine|\AE]] initializes
the {{{Resource}}} with some objects that are required to process the user's HTTP request.
Many components receive such an initialized {{{Resource}}} as a method parameter. They
obtain a {{{GaleContext}}} wrapper like this:

{{{
GaleContext gale = GaleContext.of(resource);
}}}

Inside [[../gale-code|GALE code]] that runs in the adaptation engine, the
{{{GaleContext}}} can be accessed using the 'gale' variable. For instance:

{{{
&lt;gale:variable expr="gale.req().getParameter(&amp;quot;name&amp;quot;)" />
}}}

The {{{req()}}} method refers to the actual {{{HttpServletRequest}}} object and can be
used to access request parameters. {{{GaleContext}}} is not available in code that runs in
the [[um-service|\UM service]], i.e. an attribute's default code and event
code.</gale:text>

<gale:text tag="default" type="creole">=== GaleContext methods ===

Most of the methods available through the {{{GaleContext}}} have a static version and an
instantiated version. As all of the information is available in the resource, instead of
writing {{{gale.req()}}}, one could write {{{GaleContext.req(resource)}}}. These methods
are:
* 'sc', the {{{ServletContext}}}
* 'ac', the [[=http://www.springsource.org/about|Spring]] {{{ApplicationContext}}} object
* 'req', the {{{HttpServletRequest}}}
* 'resp', the {{{HttpServletResponse}}}
* 'um', transparent, cached access to the \UM
* 'dm', transparent, cached access to the \DM
* 'cm', the <gale:a href="codemanager"><tt>CodeManager</tt></gale:a>
* 'pm', the {{{ProcessorManager}}}, the object that runs all the processors
* 'cfgm', the <gale:a href="adaptation-engine"><tt>ConfigManager</tt></gale:a>
* 'ebc', the {{{EventBusClient}}} that allows sending [[events]]
* 'uec', the {{{UserEntityCache}}}, allows access to user entities that are used to store
  things like userid and password
* 'gc', the {{{GaleConfig}}} object, knows the GALE_HOME directory and servlet root
* 'log', the {{{LogManager}}}, used to logging
* 'concept', the requested concept
* 'conceptUri', the requested concept's URI
* 'userId', the user's identifier
* 'userUri', the user's identifier as a URI
* 'url', the URL of the resource that has been selected for this concept
* 'stream', {{{InputStream}}} that represents the state of the {{{Resource}}}
* 'encoding', the file encoding used by the {{{InputStream}}}
* 'mime', the mime type of the content in the {{{InputStream}}}
* 'xml', optional XML DOM tree representing the state of the {{{Resource}}}
* 'servletAccess', a Boolean indicating if the request came through the {{{GaleServlet}}}
* 'currentView', the name of the [[view-module|view]] in which XML processing is currently
  taking place
* 'isObject', a Boolean indicating if the request is for an object (using
  &lt;gale:object>)

There are some special methods to deal with [[../gale-code|GALE code]]:
* 'openUmSession', opens a transactional session to the \UM cache that allows updating
* 'eval', evaluate the specified GALE code in the current context
* 'exec', execute the specified GALE code in the current context

The [[processors]] use the following methods to indicate to other processors in what state
the {{{Resource}}} is:
* 'usedRequest', marks the //req// object as used
* 'usedStream', marks the //req// and //stream// objects as used
* 'usedXml', marks the //req//, //stream// and //xml// objects as used
* 'usedResponse', marks the //req//, stream//, //xml// and //resp// objects as used

Some convenience methods exist to retrieve, add and remove cookies. They take various
methods of browsers into account to remove a cookie:
* 'addCookie', add a cookie, {{{null}}} can be used to remove it
* 'getCookie', retrieve the value of a cookie

The {{{GaleContext}}} is the interface through which GALE code can access any information
related to the context of the request.</gale:text>

</gale:repo>