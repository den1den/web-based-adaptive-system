<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">replacing the default implementation of
Java as the language to describe adaptivity</gale:text>

<gale:text tag="default" type="creole">Replacing the {{{JavaCodeManager}}} that is part of
GALE is one of the more complex extensions. We will not describe the process in the same
level of detail as the other extension. Instead we provide some pointers that will explain
the basic idead.

Below are the two interfaces that need to be implemented:

{{{
public interface CodeManager {
    public Object evaluate(CodeResolver resolver, String code,
            Collection&lt;Argument> params);

    public void execute(CodeResolver resolver, String code,
            Collection&lt;Argument> params);
}
}}}

{{{
public interface CodeResolver {
    public void setGel(GELResolver gel);

    public ResolveCallback resolve(StringBuilder code,
            List&lt;Argument> params);
}
}}}

In the rest of this section we assume we are building a [[=http://www.lua.org/|LUA]]
and [[../gel/gel|GEL]] mixed interpreter (a [[=http://www.keplerproject.org/luajava/|Java
LUA interpreter]] is easy to find). The LUA code will be intermixed with GEL fragments,
just like the Java code is in the {{{JavaCodeManager}}}. So in this section we would make
a {{{LUACodeManager}}} and {{{LUACodeResolver}}}.

The {{{code}}} parameter in both methods of the {{{CodeManager}}} contains the actual
source code used to create adaptation rules. The {{{CodeResolver}}} should translate this
intermixed format to pure LUA allowing the LUA interpreter to do its job. A
{{{CodeResolver}}} should only work when the {{{GELResolver}}} is set. When the
{{{LUACodeResolver.resolve}}} method finds a fragment of GEL, the
{{{GELResolver.resolveGaleVariable}}} can be used to obtain the value of that fragment as
an {{{Argument}}} object. This {{{Argument}}} will have details on the name of the
variable, the value and the type. This information can then be used to replace the
fragment of GEL by a variable name and pass the value to the interpreter when it is run by
adding it to the {{{params}}} list.

When all fragments have been replaced, the {{{params}}} list will most likely have grown
and the code only contains pure LUA. The {{{LUACodeResolver.resolve}}} method will return
a {{{ResolveCallback}}} object that should be called by the {{{CodeManager}}} after the
LUA code was run. The {{{ResolverCallback.callback}}} method should send a detailed report
of how the code affected the parameters to the {{{GELResolver.resolveStateChange}}}
method. This will make sure that the proper user model updates are carried out.

To configure the new {{{LUACodeResolver}}} and {{{LUACodeManager}}} the following sections
in [[configuration|galeconfig.xml]] will be affected:

{{{
&lt;bean id="codeResolver" class="mydomain.LUACodeResolver">
    &lt;property name="gel">
        &lt;bean class="nl.tue.gale.ae.impl.GELResolverImpl" />
    &lt;/property>
&lt;/bean>

&lt;bean id="codeManager" class="mydomain.LUACodeManager" />

&lt;bean id="umServiceImpl" class="nl.tue.gale.um.UMServiceImpl">
    &lt;property name="eventListenerFactory" ref="eventListenerFactory" />
    &lt;property name="dataManager" ref="dataManager" />
    &lt;property name="codeManager" ref="codeManager" />
    &lt;property name="codeResolver">
            &lt;bean class="mydomain.LUACodeResolver" />
    &lt;/property>
&lt;/bean>
}}}

When compared to the {{{JavaCodeManager}}}, similar [[caching-code|caching]] and
[[codemanager|security]] functionality will have to be created depending on the language
used.</gale:text>

</gale:repo>