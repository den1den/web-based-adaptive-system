<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">software components of the
[[adaptation-engine|adaptation engine]] that performs a particular type of transformation
on a resource to make it more suitable to the user</gale:text>

<gale:text tag="long" type="creole">A processor in GALE is a software componenent that is
part of the [[adaptation-engine|adaptation engine]]. A specific processor is used to
transform a {{{Resource}}} to a state that is (eventually) more suitable to the user.
Different types of processors can be chained to achieve the goal of adapting a resource.
The processor list is [[configuration|configured]] in the
[[=http://www.springsource.org/about|Spring]] configuration file.

Typical processors include:
* The XML Processor, tranform parts of an XML file using the [[../domain-model|\DM]] and
  [[../user-model|\UM]] as input.
* The Load Processor, translate a request for a particular concept to a request for a
  resource.
* The HTML Processor, transform an HTML document to XHTML.</gale:text>

<gale:text tag="default" type="creole">After the initial setup by the
[[adaptation-engine|adaptation engine]], a {{{Resource}}} object is passed from one
processor to the next. The {{{Resource}}} is a collection of named objects, much like a
{{{HashMap}}}. Objects in the {{{Resource}}} can be marked as used. Initially the
{{{Resource}}} contains the following (unused) objects:
* "request", the {{{HttpServletRequest}}} object
* "response", the {{{HttpServletResponse}}} object
* "servletContext", the {{{ServletContext}}} object
* "applicationContext", the [[=http://www.springsource.org/about|Spring]]
  {{{ApplicationContext}}} object
* "nl.tue.gale.userUri", the URI identifying the user
* "nl.tue.gale.conceptUri", the URI identifying the requested concept
* "nl.tue.gale.servletAccess", a Boolean indicating whether the request came through the
  {{{GaleServlet}}}

The idea is that processors do something with the information in the {{{Resource}}}, mark
some objects as used if they don't want other processors to do something with the object,
and perhaps insert some new objects in the {{{Resource}}}. Each processor should have a
specific, replacable, separated job. This concept has lead to the processors described in
the sections below. They are executed in the order that they appear in.</gale:text>

<gale:text tag="default" type="creole">==== PluginProcessor ====

When the request URL has a 'plugin' parameter, the {{{PluginProcessor}}} attempt to find
the {{{Plugin}}} using a table configured by Spring. It is an error to specify a
non-existing plugin. When the plugin is found, control over the resource is given to the
plugin. The following plugins are used to support various functions of GALE:
* //ExecPlugin//, execute the code attached to an adaptive link using the {{{exec}}}
  attribute
* //ExportPlugin//, export the \DM of related concepts to a [[../gdom|.gdom]] file
* //LogoutPlugin//, logout the current user
* //MCPlugin//, evaluate multiple choice tests
* //UpdateContentPlugin//, update the \DM database using the specified
  [[../../research/cam|.cam]] file
* //AjaxPlugin//, fire ajax events that keep track of reading time spent on a page
* //ProfileResetPlugin//, reset the current user's profile (except comments)
* //CommentsPlugin//, display comments for the current concept and allow the user to
  submit new comments
* //StatusPlugin//, display all \UM variables and their values for the current concept

Some of the plugins, like the {{{MCPlugin}}} and {{{ExecPlugin}}}, are only used by GALE
to make specific functions work. Some plugins, like {{{ExportPlugin}}}, perform utility
functions. For instance, typing '?plugin=export&amp;root=<gale:variable
expr="${.}.getUriString()" />' at the end of the URL in your browser's address bar, would
export the \DM of the current concept and all concepts reachable through the 'parent'
relation. There are also plugins that might be useful for users of an adaptive course,
like the {{{LogoutPlugin}}} or the {{{CommentsPlugin}}}. Links to these plugins can be
created like this:

<pre>
<gale:a href="?plugin=comments" adapt="false" class="good">&lt;gale:a href="?plugin=comments" adapt="false" class="good"></gale:a>
</pre></gale:text>

<gale:text tag="default" type="creole">==== FrameLayoutProcessor ====

This processor uses [[../layout-tables|HTML tables and an &lt;iframe>]] to support the
various views in an adaptive application. It only processes the {{{Resource}}}, if the
{{{#layout}}} attribute exists and has a non-empty value. When the processor receives the
initial resource, based on the request send by the client, it generates an HTML table
structure that emulates the layout described in the {{{#layout}}} attribute. The place
where the actual content is supposed to be, is filled with an &lt;iframe> that redirects
to the same concept, but adding a 'frame=true' request parameter to the URL. It then skips
the {{{LoadProcesser}}}, by indicating that the {{{HTTPRequest}}} object has already been
used.

When the browser finds the &lt;iframe>, the concept will be requested a second time. The
{{{FrameLayoutProcessor}}} will notice the 'frame=true' parameter and will not do
anything, except tell the {{{UpdateProcessor}}} not to run (this has already been done
when the frame was created). The resulting output will be the content of the
concept.</gale:text>

<gale:text tag="default" type="creole">==== UpdateProcessor ====

The {{{UpdateProcessor}}} executes the \UM updates that are caused by the concept access.
More specifically, it sends the code found in the {{{event}}} property of the concept to
the [[codemanager|CodeManager]]. The processor can be disabled for a particular request by
specifying 'no-update=true' as request parameter.</gale:text>

<gale:text tag="default" type="creole">==== LoadProcessor ====

[[../locating-content|Locating the proper resource]] when the user requests a concept is
the job of the {{{LoadProcessor}}}. It will only run if there is an 'unused' {{{request}}}
object in the {{{Resource}}}. The {{{request}}} will be marked as used and the loaded
content will be made available as a {{{stream}}} object. Furthermore, a {{{mime}}} object
is added to the resource that identifies the type of content.</gale:text>

<gale:text tag="default" type="creole">==== LogProcessor ====

Logging options are available through the {{{LogProcessor}}}. It optionally records the
concepts accessed in a log directory that can be [[configuration|configured]].</gale:text>

<gale:text tag="default" type="creole">==== HTMLProcessor ====

The {{{HTMLProcessor}}} uses a third-party tool called
[[=http://home.ccil.org/~~cowan/tagsoup/|TagSoup]] to create a proper XHTML document. The
{{{stream}}} object from the {{{Resource}}} is used as input and marked as used. The
output is an in-memory XHTML document, ready for processing by the {{{XMLProcessor}}} and
stored in the {{{Resource}}} as {{{xml}}}.</gale:text>

<gale:text tag="default" type="creole">==== ParserProcessor ====

When the content's {{{mime}}} type represents XML (this includes XHTML), and the
{{{stream}}} object is not used, the {{{ParserProcessor}}} will parse the document found
in the {{{stream}}}. The result will be stored as an {{{xml}}} in-memory DOM tree, and the
{{{stream}}} will be marked as used.</gale:text>

<gale:text tag="default" type="creole">==== CSSLayoutProcessor ====

If the attribute {{{#layout.content}}} exists, has a non-empty value and the {{{mime}}}
type indicates XHTML, the {{{CSSLayoutProcessor}}} will do the following:
* place the actual content found in the &lt;body> section inside a &lt;div
  id="gale-content"> section.
* parse the content in the {{{#layout.content}}} attribute and insert it before the
  'gale-content' div.

This allows the {{{#layout.content}}} attribute to refer to specific views that are
encapsulated inside a &lt;div> section. CSS is used to layout the various &lt;div>
sections on the screen.</gale:text>

<gale:text tag="default" type="creole">==== XMLProcessor ====

The {{{XMLProcessor}}} transforms an in-memory {{{xml}}} document using
[[../modifying-resource|modules]] that are activated by specific tags in the document.
This is achieved by 'walking the tree'. If a tagname matches one of the modules
[[configuration|configured]], control over the element is passed to the
module.</gale:text>

<gale:text tag="default" type="creole">==== SerializeProcessor ====

If there is an {{{xml}}} document in the {{{Resource}}}, the {{{SerializeProcessor}}} will
serialize the in-memory DOM tree to an {{{InputStream}}}, that is stored in the
{{{Resource}}} as {{{stream}}}.</gale:text>

<gale:text tag="default" type="creole">==== SendProcessor ====

Sending the adapted content to the browser is usually the last step. The
{{{SendProcessor}}} checks whether the {{{response}}} object has been used. If it is
unused, it will use the {{{stream}}} in the {{{Resource}}} as content that is send to the
client.</gale:text>

</gale:repo>