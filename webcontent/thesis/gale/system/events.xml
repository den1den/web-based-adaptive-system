<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">events that are send over the event bus
between services and between a service and the \AE</gale:text>

<gale:text tag="long" type="creole">Events are messages that have a 'method' name and some
contents. They allow the various components, like the \AE, \DM service and \UM service, to
communicate with each other over an event bus. To listen for specific types of events, a
service needs to register on the bus, specifying the method names it is interested
in.</gale:text>

<gale:text tag="default" type="creole">The [[adaptation-engine|\AE]] and the [[services]]
communicate with each other using events (these events are a different type of 'events'
than those that occur within the adaptation engine, like the user clicking a link). Every
event has a [[event-types|type or method]]. Any component can send an event to the event
bus, which will forward the event to all registered services. Events can be send
synchronously and asynchronously. Some events that typically require an answer (and thus
use the synchronous method) are: 'getdm', 'getum' and 'setum'. You might not expect
'setum' to be a synchronous method, but it will return the values of \UM variables that
have been updated as a consequence of setting some other values. This protocol is in turn
a consequence of the [[caching-um|caching]] that occurs in the \AE.

The first design of the event mechanism in GALE only allowed SOAP as the communication
channel. The contents of the events can contain arbitrary Java objects, since the \UM can
contain arbitrary Java objects. To send this information over SOAP, it would have to be
serialized. To this end, the {{{Concept}}} and {{{EntityValue}}} classes (representing an
in-memory version of a \DM concept and a \UM value respectively) contain serialization and
deserialization methods. The fact that the contents of most events would have to be
serialized anyway, lead to a flat design of events: Each event has a //method name// (a
String), and a list of parameters (a List of Strings).

One way of serializing arbitrary Java objects is using the Java
[[=http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html|serialization]]
built into the language. Besides some general objections against Java serialization
[[../../references?tags=Bloch08|[Bloch08~] chapter 11]], this would break a goal of SOAP
to be a communication channel between software written in different programming languages.
The current implementation uses Java serialization selectively. Whenever a class supports
a String constructor that when used with the object's toString method results in an equal
object, the toString method is used to serialize the object. This includes the String
class, all number classes and booleans. Other classes use Java serialization (breaking
language interoperability).

A future design of the event mechanism would allow various serialization methods (JSON,
YAML, Google Protocol Buffers, Kryo) to be combined with communication channels (SOAP,
XML-RPC, sockets, direct method calls) efficiently. The current implementation in GALE
also supports local method calls as the communication channel. This is useful for
installations where all services and \AE run on a single machine. However, events still
use the same format, which means anything going over the bus is serialized. When local
method calls are used, there is no reason for serialization, and avoiding it could further
increase performance.</gale:text>

</gale:repo>