<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">storing the (intermediate) result of an
expensive operation for future reference, allowing better performance</gale:text>

<gale:text tag="long" type="creole">GALE uses aggressive caching to enhance performance.
Most caches follow the LRU (Least Recently Used) alogithm to remove elements from the
cache. The Java garbage collector is also allowed to remove elements when memory is
required elsewhere. Issues that arise when the cache no longer reflects the new state of
things are solved using events that invalidate (parts of) the cache or update it to new
values.</gale:text>

<gale:text tag="default" type="creole">When a user initially accesses a GALE concept, by
going to a specific URL with a browser, GALE has a lot of work to do. For instance,
consider what needs to happen when reading a page of this thesis:
# \DM information about the requested concept needs to be found (assuming the user is
  already logged in). An event is send to the event bus that ends up in the various \DM
  services registered on the bus. In the case of this thesis the \DM is stored in .gam
  files [[../gam/usage|bundled with the content]]. The .gam files form a hierarchy of
  modules that require GALE to load them all before making any decisions on relations. All
  these .gam files (around a dozen) are retrieved via HTTP and need to be parsed in order
  to create a hierarchical in-memory domain model. This information is again send over the
  event bus to the \AE.
# The \AE, or more specifically the [[processors|UpdateProcessor]], needs to execute code
  that might be attached to the concept as event code. This code might contain
  [[../gale-code|GALE EL code]], a special notation using {{{${...~}}}} syntax to easily
  access \UM and \DM. This special notation is translated to pure Java code. The Java code
  is compiled (requires parsing, etc.) and executed. The code will most likely update the
  \UM. These updates are send to the \UM service. Updating an attribute might trigger more
  updates (event code attached to the attribute). The \AE waits on the \UM service to
  calculate the set of changes.
# For the \UM service to calculate the set of changes, it requires \DM information (see
  step 1). The event code associated with each attribute is executed (possibly triggering
  more updates and more \DM requests). When all updates are executed the resulting set of
  changes is sent over the event bus. Persistent attribute values are stored in a
  database.
# The [[processors|LoadProcessor]] of the \AE needs the {{{#resource}}} attribute, which
  is requested through the \UM service. Again communicating over the event bus. The actual
  resource is retrieved (via HTTP for this thesis, other [[../locating-content|options]]
  exist) and parsed.
# The content adaptation begins. Depending on the content this can be simple or complex,
  depending on the use of special [[../modifying-resource|GALE tags]]. If these tags
  contain expressions (which they often do), something similar as step 2 occurs. If the
  presentation of the concept includes a menu, the menu needs to be build. The links in
  this menu might depend on various attributes defined by the author, like
  {{{#hierarchy}}}, {{{#order}}}, {{{#suitability}}}, {{{#visited}}}, etc. All these
  attributes require \UM and \DM information, hence events to \UM and \DM services.
# The resulting DOM tree is serialized and send to the user.

It is not difficult to see that many of these steps are time consuming. Most of them are
necessary for the first request a user sends to GALE. Using modest hardware (a 2008 HP
Compaq 6710b laptop), GALE is able to do all of this in less than 2 seconds. Though that
is not a bad figure, considering what is involved, it is nowhere near fast enough for a
web server. If GALE would have to do all of this work for every concept access, it would
never be a usable system.

The solution we use in GALE is aggressive caching. It comes at a price in both memory
consumption and code complexity. But it allows GALE to serve the same webpage, and do all
the adaptation involved, a second time in under 10ms (not including a possible http access
if the resource is located on the web). This effectively makes GALE capable of supporting
thousands of concurrent users.

Caching is used in various places throughout GALE. Most \DM services keep a cache of
in-memory \DM models. For instance, the GAM \DM service needs to load and parse .gam files
to build the domain model. When the \AE requests a particular concept's \DM, the .gam file
that contains the information will likely contain information on related concepts (because
it is stored in a location related to the content location and was written by the same
author). It is a fair assumption that some of these related concepts will be requested in
the near future. The current concept's presentation might contain a menu or links that
require information on related concepts, or the user might navigate to one of the related
concepts, etc. Hence, the GAM \DM service keeps a cache of all concepts read through .gam
files.

Two of the more interesting places where caching plays a crucial role in performance are:
* [[caching-um|caching UM]]
* [[caching-code|caching compiled code]]

Almost all of the caches in GALE share some characteristics:
* LRU (Least Recently Used) algorithm for removal. When items need to be removed from the
  cache, the least recently used items will be removed first.
* Memory sensitive. The values in the cache use 'soft references', a Java mechanism that
  allows the garbage collector to empty (parts of) the cache if memory is required
  elsewhere.
</gale:text>

</gale:repo>