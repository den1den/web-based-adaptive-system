<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">extending GALE to handle new types of
content or changing specific parts of processing resources</gale:text>

<gale:text tag="long" type="creole">When GALE receives a request for a concept, the
various tasks of updating the [[../user-model|user model]], loading the resource, adapting
the content, doing layout, etc., are delegated to [[processors]]. Any processor can be
replaced or new processors can be added anywhere in the list.</gale:text>

<gale:text tag="default" type="creole">Concept resources are normally loaded from the GALE
instance's web server or through http requests. The URL that is used to locate the
resource is stored in the {{{#resource}}} attribute. In the example about new processors
the mechanism to locate resources will be extended so that it includes databases. This
will allow the actual content of the example course to be stored in a database.

Processors can perform a wide variety of functions within GALE. There is a
{{{ParserProcessor}}} that parses XML when it is found in the resource. A
{{{PluginProcessor}}} manages all plugins, a {{{LayoutProcessor}}} manages views and
layout, the {{{XMLProcessor}}} adapts XML based on available modules, etc. In the example
the {{{LoadProcessor}}} will be replaced. This processor contains the logic to locate
resources based on the {{{#resource}}} attribute.

It is desirable to give the author of a course the option to load a resource from a
database, while it should still be possible to use URL's to locate resources on the web.
To allow the new load processor to make the distinction, a new attribute called
{{{#dbresource}}} will be introduced. If this attribute has a value for a particular
concept, the resource is loaded from a database, otherwise it will be loaded by using the
regular {{{#resource}}} attribute.

=== Creating the source code ===

A basic new processor will look like this:

{{{
package mydomain.processor;

import nl.tue.gale.ae.ResourceProcessor;

public class DBLoadProcessor implements ResourceProcessor {
    public void processResource(Resource resource) throws ProcessorException {
    }
}
}}}

To access a database, a {{{javax.sql.DataSource}}} object (that can be configured by Spring) is used and a
parameterised query string is used to access the information. These will both be configured by Spring.

{{{
private DataSource ds = null;
public void setDataSource(DataSource ds) {
    this.ds = ds;
}

private String query = null;
public void setQuery(String query) {
    this.query = query;
}
}}}

We are now ready to create the logic of this {{{DBLoadProcessor}}}. First the
{{{#dbresource}}} attribute's value needs to be retrieved and it has to be decided whether
it is valid. The {{{GaleContext.eval}}} method could be used to evaluate the value of the
{{{#dbresource}}} attribute, which would result in shorter code. However, it is faster
(better performance at runtime) to retrieve the value directly from the cache, as
demonstrated below.

{{{
GaleContext gale = new GaleContext(resource);
URI resourceAttr = GaleUtil.setURIPart(gale.conceptUri(), GaleUtil.URIPart.FRAGMENT, "dbresource");
resourceAttr = GaleUtil.addUserInfo(resourceAttr, gale.userId());
EntityValue ev = gale.um().get(resourceAttr);
if (ev == null)
    return;
}}}

Assume the value is a list of parameters for the query and the list has the
parameters 'name1=value1;name2=value2;etc':

{{{
String currentQuery = query;
for (String param : ev.getValue().toString().split(";")) {
    String name = param.substring(0, param.indexOf("="));
    String value = param.substring(param.indexOf("=") + 1);
    currentQuery = currentQuery.replace("%" + name + "%", value);
}
}}}

The query is executed and the result is interpreted as a string.

{{{
String content = null;
try {
    ResultSet rs = ds.getConnection().createStatement().executeQuery(currentQuery);
    content = rs.getString(0);
} catch (SQLException e) {
    throw new ProcessorException("unable to execute SQL query", e);
}
}}}

The variable {{{content}}} now contains the content that should be made available to other processors. An
InputStream in the resource named 'stream' is expected.

{{{
InputStream is = new ByteArrayInputStream(content.getBytes());
resource.put("stream", is);
resource.put("mime", "text/xhtml");
gale.usedRequest();
}}}

The code is now ready.

=== Configuring GALE to use a new processor ===

A new definition for the {{{DBLoadProcessor}}} bean is created:

{{{
&lt;bean id="dbLoadProcessor" class="mydomain.processor.DBLoadProcessor">
    &lt;property name="dataSource" ref="hibernateDataSource" />
    &lt;property name="query" value="select content from repository where id = %id%" />
&lt;/bean>
}}}

Processors are configured in galeconfig.xml in the 'processorList':

{{{
&lt;bean id="processorManager" class="nl.tue.gale.ae.impl.DefaultProcessorManager">
    &lt;property name="processorList">
        &lt;list>
            ...
}}}

We need to add the entry for the {{{dbLoadProcessor}}} bean just before the existing
{{{loadProcessor}}}. This allows the loadProcessor to run if no {{{#dbresource}}}
attribute is found.

{{{
...
&lt;ref bean="updateProcessor" />
&lt;ref bean="dbLoadProcessor" />
&lt;ref bean="loadProcessor" />
...
}}}

The domain model of a concept of which the content is in the database could contain the
following:

{{{
http://wwwis.win.tue.nl/2ID05/welcome {
    #dbresource 'id=110'
}
}}}
</gale:text>

</gale:repo>