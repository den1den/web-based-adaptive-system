<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">a model describing the system's knowledge
of the user, possibly related to a particular domain</gale:text>

<gale:text tag="long" type="creole">The user model in [[../gale|GALE]] is a collection of
named values on a per user basis. The names correspond to those of concepts in the
[[domain-model|domain model]]. The data type of the values can be any type supported by
the underlying serialization method. In the default situation this means any Java class
that implements the Serializable interface.</gale:text>

<gale:text tag="default" type="creole">In [[../gale|GALE]] the user model consists of
domain dependent and domain independent variables. All variables are addressed using a URI
that is very similar to the one used for addressing concepts and attributes in the
[[domain-model|domain model]]. The only difference is the user info part of the URI as it
now contains the user's id. The following is an example of a URI addressing the actual
user model variable //knowledge// for the //Planet// concept as seen in david's user model
(where david is a learner):

{{{
gale://david@grapple-project.org/Milkyway/Planet#knowledge
}}}

GALE uses the default code and event code of an attribute to update the user model when a
change occurs. The event code is executed when the value of an attribute changes in the
user model (forward reasoning). The default code is executed to calculate the value, when
there is no value in the user model database (backward reasoning). If an attribute is
set to be not persistent, the value will never be stored in the database. Instead it will
be recalculated, whenever necessary. Addressing domain independent variables can be done
by inventing URIs that do not exist in the domain model. For example:

{{{
gale://david@gale.tue.nl/personal#email
}}}

can be invented to address the email address of the user david. We typically use the word
//personal// to refer to the domain independent information about the use but that is just
a convention. You can use any term you like as long as it does not collide with the name
of an existing course.

Any (serializable) Java class can be stored in the user model. Whether a specific type can
actually be serialized depends on the method of serialization selected. For backward
compatibility GALE uses Java serialization by default. Other methods can be configured
(like the faster <a href="http://code.google.com/p/kryo/">Kryo</a>). Numerical values and
a textual representation (using toString) are stored redundantly for use in queries over
the user model.

GALE can communicate part of its user model to and from external services, in particular
[[../research/gumf|GUMF]]. Attribute properties are used to specify the required
information for this communication.</gale:text>

</gale:repo>