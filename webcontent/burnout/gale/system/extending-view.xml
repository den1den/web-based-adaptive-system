<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">extending GALE to generate content based on the
request, \DM and \UM</gale:text>

<gale:text tag="long" type="creole">Creating a new view for GALE involves writing a class
that implements the {{{LayoutView}}} interface. This class will generate in-memory X(HT)ML
content. In code the author has full access to anything available to GALE, like the \DM
and \UM.</gale:text>

<gale:text tag="default" type="creole">An adaptive course may want to offer students that
have difficulty in comprehending a particular subject, the option to contact expert
students. Their screen (depending on certain user model conditions) may look like this:

{{../images/creating-view.jpg|Image of AHA! tutorial with experts view}}

In the bottom left section of the screen you can see 5 names of possible experts on the
subject. Presentation views can be used to generate XHTML content that is placed at the
correct location in the document using [[../presentation|adaptive layout]]. Assuming
'layout using tables' is used, the example below shows the GAM definition of the root
concept in this course:

{{{
http://aha.win.tue.nl/tutorial {
    #layout '       
        &lt;struct cols=\"150px;*\">
            &lt;struct rows=\"*;150px\">
                &lt;view name=\"static-tree-view\"/>
                &lt;view name=\"expert-view\"/>
            &lt;/struct>
            &lt;content/>
        &lt;/struct>
    '
}
}}}

The layout uses two views: static-tree-view (which is included in GALE) and expert-view
(which is going to be created).

=== Creating the source code ===

To create a new presentation view, a new class has to be created that implements the
{{{nl.tue.gale.ae.processor.view.LayoutView}}} interface. A basic
(empty) view would look as follows:

{{{
package mydomain.view;

import org.dom4j.Element;
import nl.tue.gale.ae.processor.view.LayoutView;

public class ExpertView implements LayoutView {
    public Element getXml(Resource resource, Object... params) {
        return null;
    }
}
}}}

The {{{getXml}}} method should return whatever X(HT)ML this view produces. This is the
place where the names of experts and possibly a link to their email address should be
generated. A query to the UM service is used to retrieve the information. The query can be
any [[=http://www.hibernate.org|Hibernate]] query. The query has to be encapsulated in an
event string as defined by the {{{EventHash}}} class. Next a 'queryum' event is generated
on the event bus.

{{{
GaleContext gale = GaleContext.of(resource);
String query = "select ev.uriString from EntityValue ev " +
        "where instr('" + gale.conceptUri() + "#knowledge', ev.uriString) > 0 " +
        "order by ev.valueNumber desc";
EventHash eh = new EventHash("query");
eh.addItem(query);
eh.addItem("5");
List&lt;String> qlist = gale.ebc().event("queryum",
        Arrays.asList(new String[] { eh.toString() }));
}}}

The resulting list contains events that were generated by the UM service as a response to the 'queryum'
event. JSON (http://www.json.org) is used to serialise the result of the query. JSON has to be used to
deserialise the objects.

{{{
JSONParser parser = new JSONParser(new StringReader(qlist.get(1)));
JSONMarshall json = new JSONMarshall();
Object o = json.unmarshall((JSONObject) parser.nextValue()).getReference();
}}}

The next step is creating the XHTML code that will display the expert users that have been found. A private
method called createUserLink is used that will be defined later.

{{{
Element result = GaleUtil.createHTMLElement("span");
for (String uri : (List&lt;String>) o) {
    result.add(createUserLink(URI.create(uri).getUserInfo(), gale));
    result.add(GaleUtil.createHTMLElement("br"));
}
return result;
}}}

Proper error checking has been omitted for the sake of simplicity. The method createUserLink will generate
an anchor element that will link to the expert's email address.

{{{
private Element createUserLink(String userInfo, GaleContext gale) {
    Element a = GaleUtil.createHTMLElement("a");
    URI uri = URI.create("gale://" + userInfo + "@gale.tue.nl/personal");
    a.addText(gale.um().get(uri.resolve("#name")).getValueString());
    a.addAttribute("href", "mailto:" + gale.um().get(uri.resolve("#email")).getValueString());
    return a;
}
}}}

This code is finished and after compilation, it needs to be made available to GALE by placing the resulting
.class file in WEB-INF/classes/mydomain/view inside the tomcat/webapps/gale directory. The class file could
also be packaged within a .jar file and place it in the WEB-INF/lib.

=== Configuring GALE to use a new view ===

In galeconfig.xml all views available to GALE are configured using the
{{{presentationConfig}}} bean.

{{{
&lt;bean id="presentationConfig" class="nl.tue.gale.ae.config.PresentationConfig">
    &lt;property name="viewTable">
        &lt;map>
            ...
}}}

An entry for the expert-view needs to be created:

{{{
&lt;entry>
    &lt;key>
        &lt;value>expert-view&lt;/value>
    &lt;/key>
    &lt;bean class="mydomain.view.ExpertView" />
&lt;/entry>
}}}

When the configuration is finished and GALE restarted, this new view can be tested by modifying the layout
attribute as described earlier.</gale:text>

</gale:repo>