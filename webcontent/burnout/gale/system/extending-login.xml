<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">extending GALE to allow new methods of
identifying a user</gale:text>

<gale:text tag="long" type="creole">GALE can be extended to support new ways of
identifying the user. To do so, a new {{{LoginHandler}}} should be written and made
available to GALE. The {{{LoginHandler}}} can bypass the login screen entirely, or it can
extend the login screen and respond to the user entering details in a form.</gale:text>

<gale:text tag="default" type="creole">In some cases it may not be desirable to confront
users with a login screen. The {{{LinkLoginHandler}}} (providing login through specially
crafted URL's) or the {{{IdPLoginHandler}}} (providing login through a federated Identity
Provider) might be cumbersome to setup. A simple way of identifying a user is through its
IP address. This approach has its limitations as well, but will be used as an example of
creating a new {{{LoginHandler}}}.

To create a new {{{LoginHandler}}}, you implement the {{{nl.tue.gale.ae.LoginHandler}}}
interface:

{{{
package mydomain;

import nl.tue.gale.ae.LoginHandler;

public class IPLoginHandler implements LoginHandler {
    public String getLoginName(Resource resource) {
        return null;
    }
    
    public void addLoginPage(String method, Element page, Map&lt;String, String[]> parameters) {
    }
    
    public void doLoginPage(String method, Resource resource) {
    }
    
    public void logout(Resource resource) {
    }
}
}}}

The {{{LoginManager}}} and {{{LoginServlet}}} call the methods of all registered handlers.
The {{{addLoginPage}}} method allows a handler to add elements to the login page or
registration pages. The {{{doLoginPage}}} method is executed when the login page is
submitted. {{{logout}}} is called when the user logs out.

Before any of these methods are called, the {{{LoginManager}}} first calls
{{{getLoginName}}}. If this method returns anything other than {{{null}}}, this value will
be used as the current user's login, totally bypassing any login screen. In our example
{{{IPLoginHandler}}}, this is the only method we need te define. Replace {{{return
null;}}} with:

{{{
return GaleContext.req(resource).getRemoteAddr();
}}}

We configure GALE to use the new {{{LoginHandler}}} in galeconfig.xml. There is a bean
called {{{loginManager}}}:

{{{
&lt;bean id="loginManager" class="nl.tue.gale.ae.LoginManager">
    &lt;property name="handlerList">
        &lt;list>
            ...
}}}

In the list we add a definition for the {{{IPLoginHandler}}}:

{{{
&lt;list>
    &lt;bean class="mydomain.IPLoginHandler" />
    ...
}}}

Make the .class file available to GALE by saving it in the
{{{tomcat/webapps/gale/WEB-INF/classes/mydomain}}} directory or packaging it in a .jar
file that is stored in the {{{WEB-INF/lib}}} directory.</gale:text>

</gale:repo>