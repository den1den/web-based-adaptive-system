<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">a module that loops over the contents of
the associated XML element to include it multiple times</gale:text>

<gale:text tag="long" type="creole">{{{
&lt;gale:for var="concept" expr="${->(parent)&lt;-(parent)}" sort="${?title}">
    &lt;gale:variable expr="${%concept?title}"/>
    &lt;br/>
&lt;/gale:for>
}}}

The {{{&lt;gale:for>}}} tag evaluates the expression in the {{{expr}}} attribute and
assumes the result is an array or something where it can iterate over. The XML code
contained in {{{&lt;gale:for>}}} tag is included one time for each element in the list,
where the string identified by the {{{var}}} attribute and preceded by a '%' is replaced
with the actual elements in the list. Optionally the list can be sorted using the
{{{sort}}} attribute.</gale:text>

<gale:text tag="default" type="creole" expr="${processors#known}">The 'for' module loops
over the contents of the associated XML element to include it multiple times. The
[[configuration|configuration]] links the 'for' module to the &lt;gale:for> tag. By
default the valid mime types are:
* "text/xhtml"
* "text/xml"
* "application/xml"
* "application/smil"</gale:text>

<gale:text tag="default" type="creole"> The {{{&lt;gale:for>}}} tag uses an expression
that results in an iterable list to include the contents of the associated XML element
multiple times. The contents can use a variable defined using the {{{var}}} attribute to
access the current item in the list.

{{{
&lt;gale:for var="concept" expr="${->(parent)&lt;-(parent)}">
    &lt;gale:variable expr="${%concept?title}"/>
    &lt;br/>
&lt;/gale:for>
}}}

This code displays the titles of the siblings of the current concept. The result for this
concept (for-module) would be:

<gale:for var="concept" expr="${->(parent)&lt;-(parent)}">
    <gale:variable expr="${%concept?title}"/>
    <br/>
</gale:for>

The list can optionally be ordered. To order the previous list alphabetically, use the
{{{sort}}} attribute like this:

{{{
&lt;gale:for var="concept" expr="${->(parent)&lt;-(parent)}" sort="${?title}">
    &lt;gale:variable expr="${%concept?title}"/>
    &lt;br/>
&lt;/gale:for>
}}}

To obtain the order as seen in the menu, use {{{sort="Integer.parseInt(${?order})"}}}. The
first order is on the left, the second on the right:

<div style="float:left;margin-left:1em">
<gale:for var="concept" expr="${->(parent)&lt;-(parent)}" sort="${?title}">
    <gale:variable expr="${%concept?title}"/>
    <br/>
</gale:for>
</div>

<gale:for var="concept" expr="${->(parent)&lt;-(parent)}" sort="Integer.parseInt(${?order})">
    <gale:variable expr="${%concept?title}"/>
    <br/>
</gale:for>

The sort expression will normally use a 'value' object. Iterating over concepts is a
special case that allows the expression to be written using [[../gale-code|GALE EL code]]
as if each concept in the list is the current concept. Iterating over any other type of
object, will require the use of the 'value' object. For example:

{{{
&lt;gale:for var="name" expr="new String[] {&amp;quot;title&amp;quot;, &amp;quot;description&amp;quot;, &amp;quot;event&amp;quot;}"
    sort="value">
    &lt;gale:variable expr="&amp;quot;%name&amp;quot;"/>: &lt;gale:variable expr="${?%name}"/>
    &lt;br/>
&lt;/gale:for>
}}}

would result in:

<gale:for var="name" expr="new String[] {&quot;title&quot;, &quot;description&quot;, &quot;event&quot;}"
    sort="value">
    <gale:variable expr="&quot;%name&quot;"/>: <gale:variable expr="${?%name}"/>
    <br/>
</gale:for>

</gale:text>

</gale:repo>