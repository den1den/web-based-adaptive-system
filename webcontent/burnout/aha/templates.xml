<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">template .aha XML used by the
[[graph-author|Graph Author]] to translate the graph model to a .aha file</gale:text>

<gale:text tag="long" type="creole"></gale:text>

<gale:text tag="default" type="creole">Several template files are used by the
[[graph-author|Graph Author]] to create and translate graph models. They can be found in
the /author/authorfiles directory of an AHA! installation. Concept templates contain
attribute definitions that can be applied to a specific type of concept. By default AHA!
makes a distinction between 'page', 'abstract' and 'fragment' concepts. These types can
have a different set of default attributes.

The relations drawn in the Graph Author have a specific type, like 'prerequisite' or
'knowledge_update'. We refer to a type as a Concept Relationship Type or CRT
[[../references?tags=DeBra02-3|[DeBra02-3~]]]. Each CRT has template AHA! 'code' that
defines how a CRT will affect the DM/AM of AHA!. We include two examples described in the
[[=http://aha.win.tue.nl:18080/aha/tutorial/|AHA! tutorial]] that explain the syntax and
use of these templates in detail.

The file "knowledge_propagation.aha" is as follows:

{{{
&lt;?xml version="1.0"?>
&lt;!DOCTYPE aha_relation_type SYSTEM 'aha_relation_type.dtd'>
&lt;aha_relation_type>
  &lt;name>knowledge_propagation&lt;/name>
  &lt;listitems>
    &lt;generateListItem isPropagating="true" location="child.access" >
      &lt;requirement> true &lt;/requirement>
      &lt;trueActions>
        &lt;action combination="DIV_S">
          &lt;conceptName> parent &lt;/conceptName>
          &lt;attributeName> knowledge &lt;/attributeName>
          &lt;expression>
            parent.knowledge + (var:DIVIDE * _child.knowledge)
          &lt;/expression>
        &lt;/action>
      &lt;/trueActions>
    &lt;/generateListItem>
  &lt;/listitems>
&lt;/aha_relation_type>
}}}

The similarity with the syntax of event-condition-action rules is obvious. The elements
that need explaining are:
* "location": the {{{generateListItem}}} element contains a {{{location}}} attribute. This
  indicates to which attribute of which concept the rule belongs. In the example the
  location is {{{child.access}}} meaning the {{{access}}} attribute of the {{{child}}}
  (alternatively called {{{source}}}) concept. This is the concept from where the drawn
  arrow starts.
* "combination": It is possible to have a value in the action that depends on different
  rules that influence the same attribute of the same concept. {{{DIV_S}}} means that the
  value will be divided by the number of children or sources of arrows (relationships of
  this type) pointing to the same parent (or destination). Another possibility would be
  {{{DIV_D}}}, meaning that the value will be divided by the number of parents or
  destinations of arrows (relationships of this type) starting from the same child (or
  source).
* "var": When a value is preceded by the word "var:" it means that this value is the
  default but can be overridden by entering a value for the concept relationship in the
  graph author.
* "DIVIDE": This keyword is used in combination with DIV_S or DIV_D to indicate that a
  factor should be used that depends on the number of children (or sources), resp. parents
  (or destinations). E.g., when there are four concepts supplying knowledge to a concept
  and you don't override the value for the knowledge_propagation relationship the
  expression var:DIVIDE will result in 0.25.

The file "prerequisite.aha" is:

{{{
&lt;?xml version="1.0"?>
&lt;!DOCTYPE aha_relation_type SYSTEM 'aha_relation_type.dtd'>
&lt;aha_relation_type>
    &lt;name>prerequisite&lt;/name>
    &lt;listitems>
        &lt;setdefault location="destination.suitability" 
            combination="AND">source.knowledge &gt; var:0 &lt;/setdefault>
    &lt;/listitems>
&lt;/aha_relation_type>
}}}

A prerequisite defines a //requirement// for the destination (or parent) of the
prerequisite relationship. The example shows that this is done by setting the default
value of the {{{suitability}}} attribute of the destination concept. Because
{{{suitability}}} is a non-persistent attribute and the default value is an expression,
that expression is evaluated each time it is needed.

When there are different prerequisites thay are combined using the logical "AND" operator.
Requirements set by concept relationships can be combined with "AND" and "OR" but for the
combination of requirements defined by different types of relationships the combination is
always and automatically taken to be "AND".

In the [[../research/grapple|GRAPPLE project]] a similar approach is taken in the
[[../research/gat|GAT]] tool. Template [[../gale/gam|GAM]] code is attached to concepts
using relations. The GAT tool has a more powerful templating scheme in that it allows
multiple concepts in a source and/or target socket. This allows for instance a
prerequisite relation where one //group// of concepts is a prerequisite for another
//group//. Details on the method of 'compiling' this template code to [[../gale|GALE]] can
be found in the [[../research/cam-compiler|CAM to GALE compiler]].</gale:text>

</gale:repo>