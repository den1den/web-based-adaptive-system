<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">research questions that motivated the
work described in this thesis</gale:text>

<gale:text tag="long" type="creole">The research questions that motivated the work
described in this thesis are:
* What does a usable generic adaptive hypermedia system look like?
* What performance considerations affect its design?
* How can the design be improved to support the global scale of the World Wide Web?
</gale:text>

<gale:text tag="default" type="creole">Through the research described in this thesis, we
answer the following questions:

==== What does a usable generic adaptive hypermedia system look like? ====

The term 'generic adaptive hypermedia system' can be applied to many frameworks. Changing
the output of an HTTP server based on some characteristics of the client (possibly after
logging in) has been possible since an early stage of the World Wide Web. Specialized
server side code written by an author for his specific adaptive application is one of the
first methods used to add adaptive features to hypertext. Key in this research question is
the term 'usable'. How do we improve the authoring process? How can we make it accessible
to authors that have no skill in programming, while still maintaining the expressive power
of a programming language?

==== What performance considerations affect its design? ====

One of the goals mentioned on the [[introduction]] page <gale:if
expr="${introduction#known}"><gale:then>was</gale:then><gale:else>is</gale:else></gale:if>
that 'reading an adaptive hypertext should not be slower than reading a traditional
hypertext'. However, an adaptive web server has more work to do than a traditional web
server. There are user profiles to maintain and update. These updates need to occur within
the time spent on the request, because they might affect the adaptation. And the
adaptation of the document itself takes time when compared to only serving static content.
How can we build a system that can manage all the extra load and still produce a result in
the time span that would be experienced as instantaneous (roughly 100 ms)?

==== How can the design be improved to support the global scale of the World Wide Web?
====

Building a system that can handle the requests of a few users concurrently is one thing.
Maintaining performance while it scales to handle hundreds, thousands, or more, is
another. How do we construct an architecture that allows adaptive hypermedia to be as fast
and accessible as the current (Web-based) hypertext is?</gale:text>

</gale:repo>