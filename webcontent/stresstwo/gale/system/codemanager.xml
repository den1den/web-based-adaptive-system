<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">the component of GALE that translates
[[../gale-code|GALE code]] to Java code, compiles the code, and executes it in a secure
environment</gale:text>

<gale:text tag="default;long" type="creole">The {{{CodeManager}}} is used frequently to
execute and evaluate [[../gale-code|GALE code]]. The GALE code may contain
[[../gel/gel|GEL]] that first needs to be translated to Java code. The code is compiled
and executed in a secure sandbox, to prevent code that 'takes too long' (maybe an infinite
loop) and to prevent unsecured access to the host system.</gale:text>

<gale:text tag="default" type="creole">The {{{CodeManager}}} is an interface. It is not
aware of the underlying language used in the code, which allows new {{{CodeManagers}}} to
be [[extending-code|developed]]. A {{{CodeManager}}} has two methods: {{{evaluate}}} and
{{{execute}}}. They are used by the [[galecontext|GaleContext]] when the {{{eval}}} and
{{{exec}}} methods are called. The remainder of this section will deal with the
implementation in GALE: The {{{JavaCodeManager}}}.

The {{{JavaCodeManager}}} delegates the task of translating GALE code to pure Java, by
replacing any GEL parts, to the {{{JavaCodeResolver}}}. This class will in turn use a
{{{GELResolver}}} to interpret the GEL code. Components that use the
{{{JavaCodeManager}}}, like the \AE and \UM service, implement the {{{GELResolver}}}
interface. The two methods that are used in translating GEL to Java are:
* {{{resolveGaleVariable}}}, called when a piece of GEL needs to be resolved to an actual
  object. The object will have a type, name and value. These values are used to modify the
  GALE code in such a way that it does not contain the GEL part.
* {{{resolveStateChange}}}, called after the code had been executed to process any changes
  that have happened as a result of executing the code.

When all GEL parts have been removed, the {{{JavaCodeManager}}} checks the
[[caching-code|cache]] to see if that specific Java code has been compiled before, if not
the code is compiled using [[=http://docs.codehaus.org/display/JANINO/Home|Janino]]. This
compiler supports almost every language construct of Java version 1.4 and a great deal of
Java 1.5. A few exceptions are:
* assert (a rarely-used JDK 1.4 language feature)
* J2SE 5.0: Parametrized types (generics)
* J2SE 5.0: Enhanced FOR loop
* J2SE 5.0: Typesafe enums
* J2SE 5.0: Variable arguments
* J2SE 5.0: Annotations

To run the code, a sandbox environment is used where a special {{{ClassLoader}}} installs
a
[[=http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/SecurityManager.html|SecurityManager]].
This is the same security mechanism behind Java Applets. The code is run in a separate
thread (threads used by the {{{CodeManager}}} are pooled for performance reasons). When
the code does not end in a timely manner, the thread is stopped. When the code has been
succesfully executed, the effect of the code are captured and send to the
{{{resolveStateChange}}} method.</gale:text>

</gale:repo>