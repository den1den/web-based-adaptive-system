<?xml version="1.0" encoding="UTF-8"?>
<gale:repo xmlns="http://www.w3.org/TR/xhtml1/strict"
xmlns:gale="http://gale.tue.nl/adaptation">

<gale:text tag="short" flat="true" type="creole">an expression language to easily access
the [[../domain-model|domain]] and [[../user-model|user model]]</gale:text>

<gale:text tag="default;long" type="creole">The GALE Expression Language (GEL) makes it
easy to access the [[../domain-model|domain]] and [[../user-model|user model]]. It can be
written [[usage|inside Java code]] using the {{{${ ... ~}}}} syntax. A question mark
({{{?}}}) is used to access a property, the hash ({{{#}}}) is for attributes and {{{->}}}
and {{{&lt;-}}} are for relations.</gale:text>

<gale:text tag="default" type="creole">GEL is always evaluated in some context, in
particular a current [[../domain-model|concept]]. Each step in GEL advances to a new
relative or absolute concept that becomes the current concept. The expression can
optionally end with a step to obtain either a list of attributes, a single attribute or a
property based on the current concept.

Some examples of GEL (including the {{{${ ... ~}}}} syntax):

<pre style="white-space:pre-wrap;"><gale:text type="creole" flat="true">
|${.}                        |the current concept
|${?title}                   |the 'title' property of the current concept
|${#visited}                 |the value of the 'visited' attribute of the current concept
|${beer#knowledge}           |the value of the 'knowledge' attribute of the 'beer' relative concept
|${->(parent)#suitability}   |the value of the 'suitability' attribute of the first concept in the list of concepts obtained by following the outgoing parent relation
|${..->(parent)&lt;-(parent)}|the list of sibling concepts of the concept obtained by resolving '..'
</gale:text></pre>

A single step that goes from one concept to another can take the form of a relative URI or
a relational expression. The relative URI is resolved against the current concept URI and
the result is the new concept URI. The relational expression is used to follow domain
model relations to obtain a new concept (or list of concepts). '{{{->}}}' is used to
follow outgoing relations and '{{{&lt;-}}}' is used to follow incoming relations. The
result of following relations is always a list of concepts. The relational expression can
optionally include an index number to select a particular concept in the list. If the
index is ommited the result is either a list of concepts (if this was the last step) or a
single concept (as if the index was 0).

A special construct can be used to access a list of attribute values based on a relation.

{{{
${&lt;=(parent)#knowledge}
}}}

Note the use of '{{{&lt;=}}}' instead of '{{{&lt;-}}}'. This type of relational expression
must always end with a fragment part identifying an attribute. The result is a list of
'knowledge' attribute values of all the children of the current concept.</gale:text>

</gale:repo>